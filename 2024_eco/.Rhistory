}
## test equation
N
## plot
# plot(Time,N,type="l")
plot(Time, N, type=)
# Nt+1 = Nt + r Nt (1−Nt /K)
# create a function for this equation
# growth = function(r,K,N){
#   updatedN = N +r*N*(1-N/K)
#   return(updatedN)
# re-write ^^^
#for i = make the units variables in the loop, run for a time (for i in 1:200)
# will calculate function 100-200 times, t_1, see function.
# n_t, calculate n_t + 1, building on pop size from then. update each time in the loop
# new value is the output of this function. redeclare what n_t is
# tell to make vector: spit output at year 100, tell it to use nt_1 save values nt value for each timestep, tell where to put. put into i.
# i is time step
# use these values in a for loop
# for(t in 2:length(Time)){
#   N[t] = growth(r=r,K=K,N=N[t-1])
# }
# plot it:
###########
# create a Time vector
Time = seq(0:300)
N = rep(0:300)
return(Nt_1)
N[i] = Ninitial
return(Nt_1)
# assign parameters to r & K. r is smaller number, K is big
r = 0.0003
K = 300
N = rep(0:300)
Ninitial = 1
### the first  n
# create a Time vector
Time = seq(0:300)
#N = rep(NA,length(Time))
#N[1] = initialN
newfunction = function(Nt,r,K){
Nt_1 = Nt + r*Nt*(1-(Nt/K))
return(Nt_1)
}
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
## test equation
N
## plot
# plot(Time,N,type="l")
plot(Time, N, type=)
# Nt+1 = Nt + r Nt (1−Nt /K)
# create a function for this equation
# growth = function(r,K,N){
#   updatedN = N +r*N*(1-N/K)
#   return(updatedN)
# re-write ^^^
#for i = make the units variables in the loop, run for a time (for i in 1:200)
# will calculate function 100-200 times, t_1, see function.
# n_t, calculate n_t + 1, building on pop size from then. update each time in the loop
# new value is the output of this function. redeclare what n_t is
# tell to make vector: spit output at year 100, tell it to use nt_1 save values nt value for each timestep, tell where to put. put into i.
# i is time step
# use these values in a for loop
# for(t in 2:length(Time)){
#   N[t] = growth(r=r,K=K,N=N[t-1])
# }
# plot it:
###########
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
N = rep(0:300)
Ninitial = 1
### the first  n
# create a Time vector
Time = seq(0:300)
#N = rep(NA,length(Time))
#N[1] = initialN
newfunction = function(Nt,r,K){
Nt_1 = Nt + r*Nt*(1-(Nt/K))
return(Nt_1)
}
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
## test equation
N
## plot
# plot(Time,N,type="l")
plot(Time, N, type=)
# Nt+1 = Nt + r Nt (1−Nt /K)
# create a function for this equation
# growth = function(r,K,N){
#   updatedN = N +r*N*(1-N/K)
#   return(updatedN)
# re-write ^^^
#for i = make the units variables in the loop, run for a time (for i in 1:200)
# will calculate function 100-200 times, t_1, see function.
# n_t, calculate n_t + 1, building on pop size from then. update each time in the loop
# new value is the output of this function. redeclare what n_t is
# tell to make vector: spit output at year 100, tell it to use nt_1 save values nt value for each timestep, tell where to put. put into i.
# i is time step
# use these values in a for loop
# for(t in 2:length(Time)){
#   N[t] = growth(r=r,K=K,N=N[t-1])
# }
# plot it:
###########
good plot = plot(Time, N, type=)
goodplot = plot(Time, N, type=)
goodplot
View(goodplot)
open(goodplot)
goodplot
plot(Time, N, type="l")
plot(Time, N, type="1")
plot(Time, N, type="l")
plot(Time, N, type="d")
plot(Time, N, type="p")
source("~/Desktop/DD_ecoFor_Lab1_CLEAN.R")
### the first  n
N
### the first  n
Ninitial
## test equation
N
# create a Time vector, using the seq() function. just a vector with values from 0-300. Years or days, depends
Time
Time = seq(0:300)
Time
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
plot(Time, N, type="p")
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
N = rep(0:300)
Ninitial = 1
### the first  n, give a value
# create a Time vector, using the seq() function. just a vector with values from 0-300. Years or days, depends
Time = seq(0:300)
#N = rep(NA,length(Time))
#N[1] = initialN (same as above, Ninitial = 1)
## create the logistic function (the equation ^^^)
##
newfunction = function(Nt,r,K){
Nt_1 = Nt + r*Nt*(1-(Nt/K))
return(Nt_1)
}
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
### plot it
# plot(Time,N,type="l")
plot(Time, N, type="p")
#### see values
N
DD = for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
### plot it
DD
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
plot(Time, N, type="p")
plot(Time, N, type="l")
### plot it
N
source("~/Desktop/ecoForc_lab1.R", echo=TRUE)
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
N = rep(0:300)
Ninitial = 1
N
N[1] = Ninitial
### the first  n, give a value
N
N = rep(0:0)
N = rep(0,300)
N[1] = Ninitial
### the first  n, give a value
N
### the first  n, give a value. OR: N[1] = 1.
N ## test
Nt = rep(NA,length(Time))
# create a Time vector, using the seq() function. just a vector with values from 0-300. Years or days, depends
Time = seq(0:300)
Nt = rep(NA,length(Time))
nT
Nt
length(Time)
length(N)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
newfunction = function(Nt,r,K){
Nt_1 = Nt + r*Nt*(1-(Nt/K))
return(Nt_1)
}
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i] = Ninitial
}
### plot it
plot(Time, N, type="l")
N
N[i-1] = Ninitial
### plot it
plot(Time, N, type="l")
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i-1] = Ninitial
}
### plot it
plot(Time, N, type="l")
N
## Density Dependent Model Lab
## difference equation for logistic growth:
##    Nt+1 = Nt + r*Nt(1-(Nt/K))
###     where a population grows proportioanlly to it's size, but stops when it reaches size K
###     r = population growth rate
## https://bobshriver.github.io/UNR-EcoForecast/labs/intro2R.html
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
Ninitial = 1
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
Time = seq(0:300)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
Ninitial = 1
N[1] = Ninitial
### the first  n, give a value. OR: N[1] = 1.
N ## test
length(Time)
### the first  n, give a value. OR: N[1] = 1.
N ## test
length(Time)
length(N)
newfunction = function(Nt,r,K){
Nt_1 = Nt + r*Nt*(1-(Nt/K))
return(Nt_1)
}
return(N_1)
newfunction = function(N,r,K){
Nt = N + r*N*(1-(N/K))
return(Nt)
}
## fixed. changed Nt to N (already exists)
##  turned Nt_1 into just Nt. Now newfunction will return Nt when given values
Nt
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i-1] = Ninitial
}
### plot it
plot(Time, N, type="l")
N
for(t in 2:length(Time)){
N[t] = newfunction(r=r,K=K,N=N[t-1])
}
### plot it
plot(Time, N, type="l")
N
for(i in Time){
Ninitial = newfunction(Ninitial,r,K)
N[i-1] = Ninitial
}
### plot it
plot(Time, N, type="l")
for(t in 2:length(Time)){
N[t] = newfunction(r=r,K=K,N=N[t-1])
}
### plot it
plot(Time, N, type="l")
N
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
Time = seq(0:300)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
Ninitial = 1
N[1] = Ninitial
### the first  n, give a value. OR: N[1] = 1.
N ## test
newfunction = function(N,r,K){
Nt = N + r*N*(1-(N/K))
return(Nt)
}
Nt## fixed. changed Nt to N (already exists)
# assign parameters to r & K. r is smaller number, K is big
r = 0.05
K = 300
Time = seq(0:300)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
Ninitial = 1
N[1] = Ninitial
### the first  n, give a value. OR: N[1] = 1.
N ## test
newfunction = function(N,r,K){
Nt = N + r*N*(1-(N/K))
return(Nt)
}
for(t in 2:length(Time)){
N[t] = newfunction(r=r,K=K,N=N[t-1])
}
### plot it
plot(Time, N, type="l")
N
##            Working Code            ###
r = 0.05
K = 500
Time = seq(0:300)
N = rep(0,length(Time)) ### fill N with 0s. rep(Value###, number of reps)
Ninitial = 1
N[1] = Ninitial
newfunction = function(N,r,K){
Nt = N + r*N*(1-(N/K))
return(Nt)
}
for(t in 2:length(Time)){
N[t] = newfunction(r=r,K=K,N=N[t-1])
}
N
plot(Time, N, type="l")
require(Rcmdr)
install.package("Rcmdr")
install.package("readr")
install.packages("Rcmdr")
##########################
#
#   ecology class r class stuff
#
require(Rcmdr)
install.packages("Rcmdr")
##########################
#
#   ecology class r class stuff
#
require(Rcmdr)
library(ggplot2)
head(Snowpit_data_brundage)
setwd("~/Desktop/r_data/2024_eco")
pit = read.csv("snow temp.csv")
head(pit)
pit
snowpit <- ggplot(pit,aes(x=depth_cm, y=temperature_degrees_celsius))+
geom_line()+geom_point(size=2)+
labs(x="Temperature (C)", y="Snow Height (cm)")+
ggtitle("Snowpit Height and Temperature",subtitle = "Taegen, Haven, & Maddie")+
theme_bw()
snowpit
ggplot(pinecone, aes(x=p_height, y = p_weight, col = treatment))+
geom_line()+geom_point(size=2)+
scale_color_manual(labels = c("Treatment 1", "Treatment 2"),values = c("red","royalblue"))+     ## adds the legend according to color of "treatment" category
scale_fill_hue(labels = c("Treatment 1", "Treatment 2"))+
guides(col = guide_legend(title = "Treatment"))+
labs(x="Pinecone Height", y="Pinecone Weight")+
ggtitle("Pinecone Ex")+
theme(plot.title = element_text(size = 20))+
theme_bw()
Snowpit_data_brundage = read.csv("Snowpit_data_brundage.csv")
snowpit_data_temp = read.csv("snowpit_data_temp.xlsx")
snowpit_data_temp = read.xlsx("snowpit_data_temp.xlsx")
snowpit_data_temp = read_excel("snowpit_data_temp.xlsx")
snowpit_data_temp = read_excel("snowpit_data_temp.xlsx")
library(readxl)
snowpit_data_temp = read_excel("snowpit_data_temp.xlsx")
head(Snowpit_data_brundage)
head(snowpit_data_temp)
pit_brundage = Snowpit_data_brundage
pit_temp = snowpit_data_temp
pit_temp = snowpit_data_temp
library(gt)
library(dplyr)
d = 0.8
Snowpit_data_brundage %>%
gt() #%>%
Snowpit_data_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in **millions** of Km"),
locations = cells_column_labels(columns = Distance_from_Sun))
Snowpit_data_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in **millions** of Km"),
locations = cells_column_labels(columns = SWE))
Snowpit_data_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in **millions** of Km"),
locations = cells_column_labels(columns = swe))
head(Snowpit_data_brundage)
Snowpit_data_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in **millions** of Km"),
locations = cells_column_labels(columns = SWE_cm))
Snowpit_brundage = read.csv("Snowpit_data_brundage.csv")
snowpit_temp = read_excel("snowpit_data_temp.xlsx")
head(Snowpit_data_brundage)
Snowpit_brundage = read.csv("Snowpit_data_brundage.csv")
head(Snowpit_data_brundage)
library(readr)
Snowpit_brundage <- read_csv("Snowpit_data_brundage.csv")
View(Snowpit_brundage)
head(snowpit_temp)
head(Snowpit_brundage)
pit_brundage = Snowpit_data_brundage
pit_temp = snowpit_data_temp
pit_brundage = Snowpit_brundage
pit_temp = snowpit_temp
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer, Height)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
cols_hide(columns = c(Hardness))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
cols_hide(columns = c(Hardness))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Height)) %>%
cols_hide(columns = c(Hardness))
pit_brundage %>%
gt() %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in grams"),
locations = cells_column_labels(columns = Weight)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Height)) %>%
tab_footnote(footnote = md("Density calculated from a 100 ml tube")) %>%
cols_hide(columns = c(Hardness))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density)) %>%
tab_footnote(foodnote = md("Measured in cm"), locations = cells_column_labels(colums = Layer))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density)) %>%
tab_footnote(foodnote = md("Measured in cm"),
locations = cells_column_labels(colums = Layer))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(colums = Layer))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer))
pit_brundage %>%
gt() %>%
cols_hide(columns = c(Height, Weight, Density)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = Layer)) %>%
tab_footnote(footnote = md("Measured in cm"),
locations = cells_column_labels(columns = SWE))
